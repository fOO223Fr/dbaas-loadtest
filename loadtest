#!/usr/bin/env python3.10

import htpasswd
import argparse
from os.path import exists
from pathlib import Path
from multiprocessing import Process
from batch import _process_batch

if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='loadtest', description="Program to loadtest dbaas operator")
    parser.add_argument("--task",
                        choices=['createprojects', 'deleteprojects',
                                'giveadminrights','removeadminrights',
                                'createdbaastenants', 'removedbaastenants',
                                'createrandomobjects',
                                'createdbaasinventory',
                                'createdbaasconn',
                                'createondemand'],
                        nargs='?',
                        help='Select what task to perform',
                        )
    parser.add_argument("--from", help="Which user to start from. Ex: --from 1", required=True, type=int)
    parser.add_argument("--to", help="Which user to end. Ex: --to 100", required=True, type=int)
    parser.add_argument("--file", help="Enter htpasswd file path")

    args = vars(parser.parse_args())
    print("Input values are {}".format(args))

    to_target = args["to"]
    from_target = args["from"]

    if args["file"]:
        filename = args["file"]
        # if htpasswd file doesn't exist in local dir then create one.
        if not exists(filename):
            Path(filename).touch()
        with htpasswd.Basic(filename, mode="md5") as userdb:
            for index in range(from_target, to_target + 1, 1):
                try:
                    userdb.add("user-" + str(index), "user" + str(index))
                except htpasswd.basic.UserExists as error:
                    print(error)
    else:
        print("Projects from {} to {} will be processed for task {}".format(from_target, to_target, args['task']))
        processes = []
        batch_size = 50
        while to_target - from_target > batch_size:
            process = Process(target=_process_batch, args=(args["task"], from_target, from_target+batch_size))
            process.start()
            processes.append(process)
            from_target += batch_size + 1
        else:
            process = Process(target=_process_batch, args=(args["task"], from_target, to_target))
            process.start()
            processes.append(process)

        for p in processes:
            p.join()
